# Config for treefmt. This is a Nix module, and as such has all
# the features of one.
# See https://flake.parts/options/treefmt-nix for a list of options
#
# NOTE: After changing formatter options, run `nix fmt -- --clear-cache` to
# force a reformat of all files
{
  lib,
  inputs,
  ...
}:
let
  flakeModule = {
    imports = [
      inputs.treefmt-nix.flakeModule
    ];

    perSystem.treefmt = _: {
      projectRootFile = "flake.nix";

      settings.global = {
        # Treefmt raises warnings for all files not covered by a formatter,
        # so we explicitly skip files that are not meant to be formatted
        excludes = [
          "**/Cargo.toml" # Managed by the Cargo command
          "*.bib" # Generated by Zotero

          # Godot scenes/resources. Managed by the editor
          "*.tscn"
          "*.tres"
          "**/project.godot"
          "*.import"
          "*.uid"

          # Unity assets. Managed by the editor
          "*.asset"
          "*.mat"
          "*.meta"
          "*.prefab"
          "*.unity"

          # Binary files
          "*.fbx"
          "*.heic"
          "*.jpg"
          "*.odp"
          "*.ods"
          "*.odt"
          "*.png"
          "*.tif"
          "*.ttf"
          "*.wav"
        ];
      };

      programs = {
        alejandra.enable = true; # Nix
        beautysh.enable = true; # Bash
        black.enable = true; # Python
        cmake-format.enable = true; # CMake
        rustfmt.enable = true; # Rust
        stylua.enable = true; # Lua
        typstyle.enable = true; # Typst

        # Like prettier, but written in memory-safe Rust
        # rather than JavaScript with it's garbage collection (ew)
        deno = {
          enable = true;

          # Be explicit about what Deno should format
          includes = lib.mkForce [
            "*.css"
            "*.json"
            "*.md"
          ];
        };

        php-cs-fixer = {
          enable = true;
          configFile = ./.php-cs-fixer.php;
        };

        taplo.enable = true; # TOML

        yamlfmt.enable = true; # YAML

        # Static analysis
        shellcheck.enable = true; # Bash

        deadnix.enable = true; # Nix
        statix = {
          # Nix
          enable = true;
          disabled-lints = [
            # !boolOrString is different to boolOrString != false
            "bool_comparison"
          ];
        };

        # Other Repositories
        # These languages are not used in this repository, but their formatters are included
        # to let me use the same config everywhere
        clang-format.enable = true; # C++

        csharpier.enable = true; # C#

        gdformat.enable = true; # GDScrip

        texfmt = {
          # Latex
          enable = true;
          includes = lib.mkForce [
            "*.tex"
          ];
        };

        # Autocorrect
        typos = {
          enable = true;
          locale = "en-gb";

          noCheckFilenames = true;

          # Default includes everything, which is too broad and causes trouble
          # when combining American and British (correct) English. Instead filter
          # to a subset of files where misspellings matter more.
          includes = lib.mkForce [
            "*.md"
            "*.typ"
            "*.php"
            "*.txt"
          ];
        };
      };

      # FIXME: Not currently working
      # Formatters not included in the treefmt-nix repo
      # settings.formatter = {
      #   phpstan = {
      #     command = lib.getExe pkgs.phpPackages.phpstan;
      #     options = [
      #       "analyze"
      #       "--level=max"
      #       "--no-interaction"
      #       "--autoload-file=${config.programs.php-cs-fixer.package}/share/php/php-cs-fixer/vendor/autoload.php"
      #     ];
      #     includes = ["*.php"];
      #   };
      # };
    };
  };
in
{
  imports = [
    # Importing a module declared by the same module causes infinite recursion,
    # so we use a `let in` block to avoid that
    # Other flakes can still use the `flakeModule` attribute for an identical config
    flakeModule
  ];

  flake.flakeModules.treefmt = flakeModule;

  perSystem.treefmt = {
    # Excludes specific to this project
    settings.global.excludes = [
      # Plain text from ~/.ssh
      "**/ssh/hosts/**"
      "**/ssh/keys/**"
    ];
  };
}
