{
  lib,
  config,
  ...
}: let
  mutexOptionsMsg = ''
    Exactly one of the following options must be specified:
    - `root`
    - `proxyPort`
  '';
in {
  imports = [
    ./docs.nix
    ./ports.nix
    ./trilium.nix
  ];

  options.custom.server = let
    inherit (lib) mkOption mkEnableOption types;

    vhostOpts = {
      root = mkOption {
        type = types.nullOr types.path;
        example = "/path/to/html";
        default = null;
        description = "The root directory to be served.\n${mutexOptionsMsg}";
      };
      proxyPort = mkOption {
        type = types.nullOr types.port;
        example = 8080;
        default = null;
        description = "The port to proxy connections to.\n${mutexOptionsMsg}";
      };

      cache.enable = mkEnableOption "add cache headers to this vhost";
      cache.expires = mkOption {
        type = types.str;
        default = "12w";
        description = ''
          The `cache-control max-age` header value as an Nginx
          [time string](https://nginx.org/en/docs/syntax.html)
        '';
      };
    };

    subdomainType = types.submodule {
      options = vhostOpts;
    };
  in {
    enable = mkEnableOption "server hosting";

    hostname = mkOption {
      type = types.str;
      example = "example.com";
      description = "The domain name of the server";
    };

    ssl = {
      publicKeyFile = mkOption {
        type = types.path;
        example = "/path/to/public.pem";
        description = ''
          Path to a public certificate file generated by
          [CloudFlare's origin CA](https://developers.cloudflare.com/ssl/origin-configuration/origin-ca/).
        '';
      };
      privateKeySecret = mkOption {
        type = types.str;
        example = "ssl/private-key";
        description = ''
          SOPS secret path to the private key file generated by
          [CloudFlare's origin CA](https://developers.cloudflare.com/ssl/origin-configuration/origin-ca/).
        '';
      };
    };

    root = vhostOpts;
    subdomains = mkOption {
      type = types.attrsOf subdomainType;
      default = {};
      description = "Subdomains to serve on the server";
    };

    baseDataDir = mkOption {
      type = types.path;
      example = "/path/to/server/data";
      description = ''
        Base directory for storing server data. Should be backed up regularly.

        Services will use subdirectories within this unless configured otherwise.
      '';
    };
  };

  config = let
    cfg = config.custom.server;

    subhosts =
      lib.attrsets.mapAttrs' (name: subdomain: {
        name = "${name}.${cfg.hostname}";
        value = mkVhost subdomain;
      })
      cfg.subdomains;

    mkVhost = subdomain: {
      locations."/" = {
        inherit (subdomain) root;
        proxyPass =
          if subdomain.proxyPort != null
          then "http://127.0.0.1:${toString subdomain.proxyPort}"
          else null;
      };

      forceSSL = true; # Enable HTTPS and redirect HTTP to it

      sslCertificate = cfg.ssl.publicKeyFile;
      sslCertificateKey = config.sops.secrets.ssl-private-key.path;

      extraConfig = ''
        ${lib.optionalString subdomain.cache.enable "expires ${subdomain.cache.expires};"}
      '';
    };

    isSet = val:
      if val != null
      then 1
      else 0;
  in
    lib.mkIf cfg.enable {
      assertions =
        lib.attrsets.mapAttrsToList (name: subdomain: {
          assertion = (isSet subdomain.root) + (isSet subdomain.proxyPort) == 1;
          message = "config.custom.server.subdomains.${name}: \n${mutexOptionsMsg}";
        })
        cfg.subdomains;

      sops.secrets.ssl-private-key = {
        owner = config.services.nginx.user;
        key = cfg.ssl.privateKeySecret;
      };

      services.nginx = {
        enable = true;
        # Compress responses using sensible defaults
        recommendedGzipSettings = true;

        virtualHosts =
          subhosts
          // {
            "${cfg.hostname}" = mkVhost cfg.root;
          };
      };

      networking.firewall.allowedTCPPorts = with cfg.ports.tcp; [http https];
    };
}
