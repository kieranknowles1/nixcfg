{
  lib,
  config,
  ...
}: let
  mutexOptionsMsg = ''
    Exactly one of the following options must be specified:
    - `root`
    - `proxyPort`
    - `proxySocket`
  '';
in {
  imports = [
    ./docs.nix
    ./forgejo.nix
    ./immich.nix
    ./paperless.nix
    ./ports.nix
    ./postgresql.nix
    ./search.nix
    ./trilium.nix
  ];

  options.custom.server = let
    inherit (lib) mkOption mkEnableOption types;

    mkHostOpt = type: example: description:
      mkOption {
        inherit example;
        type = types.nullOr type;
        default = null;
        description = "${description}\n${mutexOptionsMsg}";
      };

    vhostOpts = {
      root =
        mkHostOpt types.path "/path/to/html"
        "Absolute path to the root directory to be served.";
      proxyPort =
        mkHostOpt types.port 8080
        "The port to proxy connections to.";
      proxySocket =
        mkHostOpt types.path "/path/to/socket.sock"
        "Absolute path to socket to proxy connections to.";

      webSockets = mkEnableOption "websockets";

      cache.enable = mkEnableOption "add cache headers to this vhost";
      cache.expires = mkOption {
        type = types.str;
        default = "12w";
        description = ''
          The `cache-control max-age` header value as an Nginx
          [time string](https://nginx.org/en/docs/syntax.html)
        '';
      };
    };

    subdomainType = types.submodule {
      options = vhostOpts;
    };
  in {
    enable = mkEnableOption "server hosting";

    hostname = mkOption {
      type = types.str;
      example = "example.com";
      description = "The domain name of the server";
    };

    ssl = {
      publicKeyFile = mkOption {
        type = types.path;
        example = "/path/to/public.pem";
        description = ''
          Path to a public certificate file generated by
          [CloudFlare's origin CA](https://developers.cloudflare.com/ssl/origin-configuration/origin-ca/).
        '';
      };
      privateKeySecret = mkOption {
        type = types.str;
        example = "ssl/private-key";
        description = ''
          SOPS secret path to the private key file generated by
          [CloudFlare's origin CA](https://developers.cloudflare.com/ssl/origin-configuration/origin-ca/).
        '';
      };
    };

    root = vhostOpts;
    localRoot = vhostOpts;
    subdomains = mkOption {
      type = types.attrsOf subdomainType;
      default = {};
      description = "Subdomains to serve on the server";
    };

    data = {
      baseDirectory = mkOption {
        type = types.path;
        example = "/path/to/server/data";
        description = ''
          Base directory for storing server data. Should be backed up regularly.

          Services will use subdirectories within this unless configured otherwise.
        '';
      };
    };
  };

  config = let
    cfg = config.custom.server;

    subhosts =
      lib.attrsets.mapAttrs' (name: subdomain: {
        name = "${name}.${cfg.hostname}";
        value = mkVhost subdomain true;
      })
      cfg.subdomains;

    mkVhost = subdomain: ssl: {
      locations."/" = {
        inherit (subdomain) root;
        proxyPass =
          if subdomain.proxyPort != null
          then "http://localhost:${toString subdomain.proxyPort}"
          else if subdomain.proxySocket != null
          then "http://unix:${toString subdomain.proxySocket}"
          else null;

        proxyWebsockets = subdomain.webSockets;
      };

      forceSSL = ssl; # Enable HTTPS and redirect HTTP to it

      # We're not using ACME as it's incompatible with Cloudflare proxies
      # I'd rather not turn that off to reduce load from scraping, public pages
      # are static and should have high cache hit rates
      #
      # Instead, use a Cloudflare origin CA, which is only recognised by
      # Cloudflare's proxy to keep traffic secure
      sslCertificate = cfg.ssl.publicKeyFile;
      sslCertificateKey = config.sops.secrets.ssl-private-key.path;

      extraConfig = ''
        ${lib.optionalString subdomain.cache.enable "expires ${subdomain.cache.expires};"}
      '';
    };

    isSet = val: val != null;
  in
    lib.mkIf cfg.enable {
      assertions =
        lib.attrsets.mapAttrsToList (name: subdomain: {
          assertion =
            builtins.length (builtins.filter isSet [
              subdomain.root
              subdomain.proxyPort
              subdomain.proxySocket
            ])
            == 1;
          message = "config.custom.server.subdomains.${name}: \n${mutexOptionsMsg}";
        })
        cfg.subdomains;

      sops.secrets.ssl-private-key = {
        owner = config.services.nginx.user;
        key = cfg.ssl.privateKeySecret;
      };

      services.nginx = {
        enable = true;
        # Compress responses using sensible defaults
        recommendedGzipSettings = true;
        # Apply sensible defaults to reverse proxies
        recommendedProxySettings = true;

        # Allow larger uploads, needed for things like Immich
        clientMaxBodySize = "50000m";

        virtualHosts =
          subhosts
          // {
            "${cfg.hostname}" = mkVhost cfg.root true;
            "${config.networking.hostName}.local" = mkVhost cfg.localRoot false;
          };
      };

      networking.firewall.allowedTCPPorts = with cfg.ports.tcp; [http https];
    };
}
