{
  config,
  lib,
  pkgs,
  ...
}: {
  options.custom.server.postgresql = let
    inherit (lib) mkOption mkEnableOption mkPackageOption types;
  in {
    enable = mkEnableOption "PostgreSQL";

    dataDir = mkOption {
      type = types.path;
      description = "The directory where PostgreSQL data will be stored.";
    };

    package = mkPackageOption pkgs "postgresql_16" {
      extraDescription = ''
        Before upgrading, make sure to read the
         for instructions
        on how to upgrade safely.
      '';
    };
  };

  config = let
    cfg = config.custom.server;
    cfgp = cfg.postgresql;
  in
    lib.mkIf cfgp.enable {
      custom.server.postgresql = {
        dataDir = "${cfg.data.baseDirectory}/postgresql";
      };

      services.postgresql = {
        # This module only exists so that others can depend on it and is thus
        # not configured by default.
        inherit (cfgp) dataDir package;
        enable = true;

        # Generated by https://pgtune.leopard.in.ua/
        # Default settings don't handle Immich's requirements (vector search),
        # as it requires too much random I/O for a HDD to run efficiently.
        settings = {
          # DB Version: 16
          # OS Type: linux
          # DB Type: web
          # Total Memory (RAM): 4 GB
          # CPUs num: 4
          # Connections num: 20
          # Data Storage: hdd

          max_connections = 20;
          shared_buffers = "1GB";
          effective_cache_size = "3GB";
          maintenance_work_mem = "256MB";
          checkpoint_completion_target = 0.9;
          wal_buffers = "16MB";
          default_statistics_target = 100;
          random_page_cost = 4;
          effective_io_concurrency = 2;
          work_mem = "43690kB";
          huge_pages = "off";
          min_wal_size = "1GB";
          max_wal_size = "4GB";
          max_worker_processes = 4;
          max_parallel_workers_per_gather = 2;
          max_parallel_workers = 4;
          max_parallel_maintenance_workers = 2;
        };

        # HACK: Workaround to make postgres use our overlays
        extensions = lib.mkForce (_ps:
          with pkgs.postgresql16Packages; [
            pgvector
            vectorchord
          ]);
      };
    };
}
