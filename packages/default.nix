{
  pkgs,
  flakeLib,
  inputs,
}: let
  packagePythonScript = flakeLib.package.packagePythonScript;
in {
  combine-blueprints = packagePythonScript {
    name = "combine-blueprints";
    src = ./combine-blueprints.py;
    version = "1.0.0";
    meta = {
      description = "Combine a directory of Factorio blueprints into a string";
      longDescription = ''
        Read the files generated by `export-blueprints` and combine them into a string
        that can be pasted into Factorio.
      '';
    };
  };

  edit-config = import ./edit-config {inherit pkgs;};

  export-blueprints = packagePythonScript {
    name = "export-blueprints";
    src = ./export-blueprints.py;
    version = "1.0.0";
    meta = {
      description = "Export Factorio blueprints to a directory";
      longDescription = ''
        Export blueprints from ~/.factorio/blueprint-storage.dat to the repository.
        Each blueprint is saved as a separate file, should any fail to be exported,
        a list of failures and their traceback is saved to "errors.txt".

        All paths are hardcoded, as this is intended for this specific repository.

        Requires [factorio-blueprint-decoder](#factorio-blueprint-decoder) to be
        on the PATH.
      '';
    };
  };

  factorio-blueprint-decoder = let
    src = inputs.src-factorio-blueprint-decoder;
  in
    packagePythonScript {
      name = "factorio-blueprint-decoder";
      src = "${src}/decode";
      version = "unstable";
      meta = {
        description = "Decode a Factorio blueprint storage file";
        longDescription = ''
          Decode a Factorio blueprint storage file into plain JSON on stdout.
          This should be considered highly unstable, and may break at any time
          or for any reason, but is designed to error out instead of producing
          invalid output.
        '';

        homepage = "https://github.com/kieranknowles1/factorio-blueprint-decoder/tree/turret_fix";
      };
    };

  nixvim = import ./nixvim {inherit pkgs inputs;};

  rebuild = import ./rebuild {inherit pkgs;};

  skyrim-utils = import ./skyrim-utils {inherit pkgs;};

  # Packaging something with NuGet dependencies is tricky, so just fetch the
  # prebuilt binary.
  spriggit = pkgs.stdenv.mkDerivation rec {
    pname = "spriggit";
    version = "0.25";

    src = pkgs.fetchzip {
      url = "https://github.com/Mutagen-Modding/Spriggit/releases/download/${version}/SpriggitLinuxCLI.zip";
      hash = "sha256-5Kbx7lgT0qs5fIYmzRCUerRcksKD0vRgH0RtSXv33EQ=";
      stripRoot = false; # The archive doesn't have a root directory
    };

    # Bit of a hack to add execute permissions to the binary
    # $src is read-only, so we need to copy to $out first, then chmod
    # Copy everything as the binary relies on other files in the archive
    installPhase = ''
      mkdir -p $out/share/spriggit
      mkdir -p $out/bin
      cp --recursive $src/* $out/share/spriggit

      chmod +x $out/share/spriggit/Spriggit.CLI
      ln --symbolic $out/share/spriggit/Spriggit.CLI $out/bin/spriggit
    '';

    meta = with pkgs.lib; {
      description = "A tool for converting Bethesda plugin files to text and back";

      longDescription = ''
        A tool to convert Bethesda plugin files (Skyrim, Fallout, Starfield) to text
        and back so that they can be effectively stored in Git repositories.

        NOTE: Spriggit fetches libraries at runtime, so it doesn't follow the
        Nix philosophy of reproducibility.
      '';

      homepage = "https://github.com/Mutagen-Modding/Spriggit";

      licence = licenses.gpl3;
    };
  };
}
