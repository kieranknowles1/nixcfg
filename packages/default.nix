{
  pkgs,
  flakeLib,
  inputs,
}: let
  packagePythonScript = flakeLib.package.packagePythonScript;
in {
  combine-blueprints = packagePythonScript {
    name = "combine-blueprints";
    src = ./combine-blueprints.py;
    version = "1.0.0";
    meta = {
      description = "Combine a directory of Factorio blueprints into a string";
      longDescription = ''
        Read the files generated by `export-blueprints` and combine them into a string
        that can be pasted into Factorio.
      '';
    };
  };

  # We use writeShellApplication instead of writeShellScriptBin as it enables
  # static analysis of the script, and patches PATH to include runtimeInputs.
  command-palette = pkgs.writeShellApplication {
    name = "command-palette";
    runtimeInputs = with pkgs; [
      gnome.zenity
    ];
    text = builtins.readFile ./command-palette.sh;

    meta = {
      description = "A simple command palette for running scripts";
      longDescription = ''
        Show a list of options in a dialog box, and run the script associated with
        the selected option. This is intended to be used with scripts that are
        run occasionally from a GUI, but not frequently enough to warrant a dedicated
        binding or menu item.
      '';
    };
  };

  edit-config = import ./edit-config {inherit pkgs;};

  export-blueprints = packagePythonScript {
    name = "export-blueprints";
    src = ./export-blueprints.py;
    version = "1.0.0";
    meta = {
      description = "Export Factorio blueprints to a directory";
      longDescription = ''
        Export blueprints from ~/.factorio/blueprint-storage.dat to the repository.
        Each blueprint is saved as a separate file, should any fail to be exported,
        a list of failures and their traceback is saved to "errors.txt".

        All paths are hardcoded, as this is intended for this specific repository.

        Requires [factorio-blueprint-decoder](#factorio-blueprint-decoder) to be
        on the PATH.
      '';
    };
  };

  factorio-blueprint-decoder = let
    src = inputs.src-factorio-blueprint-decoder;
  in
    packagePythonScript {
      name = "factorio-blueprint-decoder";
      src = "${src}/decode";
      version = "unstable";
      meta = {
        description = "Decode a Factorio blueprint storage file";
        longDescription = ''
          Decode a Factorio blueprint storage file into plain JSON on stdout.
          This should be considered highly unstable, and may break at any time
          or for any reason, but is designed to error out instead of producing
          invalid output.
        '';

        homepage = "https://github.com/kieranknowles1/factorio-blueprint-decoder/tree/turret_fix";
      };
    };

  # TODO: Use callPackage everywhere
  # TODO: Use an overlay to remove the need for the `inputs` argument and others
  nixvim = pkgs.callPackage ./nixvim {inherit inputs;};

  rebuild = import ./rebuild {inherit pkgs;};

  skyrim-utils = import ./skyrim-utils {inherit pkgs;};

  spriggit = import ./spriggit.nix {inherit pkgs;};
}
