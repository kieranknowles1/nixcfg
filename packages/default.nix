{
  self,
  inputs,
  ...
}: let
  packagePythonScript = self.lib.package.packagePythonScript;
in {
  perSystem = {system, pkgs, ...}: let
    callPackage = pkgs.callPackage;
  in {
    packages = {
      # TODO: Use a different .nix file for each package instead of inline descriptions/definitions
      # TODO: Automatically list all packages rather than manually adding them to this file?
      combine-blueprints = packagePythonScript {
        name = "combine-blueprints";
        src = ./combine-blueprints.py;
        version = "1.0.0";
        meta = {
          description = "Combine a directory of Factorio blueprints into a string";
          longDescription = ''
            Read the files generated by `export-blueprints` and combine them into a string
            that can be pasted into Factorio.
          '';
        };
      };

      command-palette = callPackage ./command-palette {};

      export-blueprints = packagePythonScript {
        name = "export-blueprints";
        src = ./export-blueprints.py;
        version = "1.0.0";
        meta = {
          description = "Export Factorio blueprints to a directory";
          longDescription = ''
            Export blueprints from ~/.factorio/blueprint-storage.dat to the repository.
            Each blueprint is saved as a separate file, should any fail to be exported,
            a list of failures and their traceback is saved to "errors.txt".

            All paths are hardcoded, as this is intended for this specific repository.

            Requires [factorio-blueprint-decoder](#factorio-blueprint-decoder) to be
            on the PATH.
          '';
        };
      };

      factorio-blueprint-decoder = let
        src = inputs.src-factorio-blueprint-decoder;
      in
        packagePythonScript {
          name = "factorio-blueprint-decoder";
          src = "${src}/decode";
          version = "unstable";
          meta = {
            description = "Decode a Factorio blueprint storage file";
            longDescription = ''
              Decode a Factorio blueprint storage file into plain JSON on stdout.
              This should be considered highly unstable, and may break at any time
              or for any reason, but is designed to error out instead of producing
              invalid output.
            '';

            homepage = "https://github.com/kieranknowles1/factorio-blueprint-decoder/tree/turret_fix";
          };
        };

      nix-utils = callPackage ./nix-utils {};

      # TODO: Use callPackage everywhere
      # TODO: Use an overlay to remove the need for the `inputs` argument and others
      nixvim = callPackage ./nixvim {inherit inputs;};

      openmw-dev = let
        # This could be a flake input, but it would take a long time to compile
        # when upgrading inputs
        latestSrc = pkgs.fetchFromGitLab {
          owner = "kieranjohn1";
          repo = "openmw";
          # My fork, based on master as of 25-09-2024
          rev = "4a087abb1def76f96873eccb4d4eeac5ffd9c62c";
          hash = "sha256-KAVCbBHp69cmZP1LnWowH+LpzFxQrZXtmQXkJWURjPY=";
        };

        devPkg = inputs.openmw.packages.${system}.openmw-dev;
      in
        devPkg.overrideAttrs (_oldAttrs: {
          src = latestSrc;
        });

      openmw-luadata = callPackage ./openmw-luadata {};

      rebuild = callPackage ./rebuild {};

      resaver = pkgs.writeShellApplication {
        name = "resaver";
        runtimeInputs = with pkgs; [
          jq
          jdk21
        ];

        text = builtins.readFile ./resaver.sh;

        meta = {
          description = "Skyrim and Fallout 4 savegame editor";
          longDescription = ''
            A savegame editor for Skyrim and Fallout 4, wrapped to be fetched automatically
            from Nexus Mods with an API key.

            The first time the script is run, it will download the JAR file from Nexus Mods. Subsequent
            calls will use the cached file.

            # Prerequisites
            The API key of a premium Nexus Mods account must be stored at `~/.config/sops-nix/secrets/nexusmods/apikey`.
          '';

          mainProgra = "resaver";
        };
      };

      set-led-state = callPackage ./set-led-state {};

      skyrim-utils = callPackage ./skyrim-utils {};

      spriggit = callPackage ./spriggit.nix {};
    };
  };
}
